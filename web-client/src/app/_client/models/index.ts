/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Chat extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Chat}
 */
// @ts-ignore
export function createChatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChat;
}
export interface CreateChatRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string | null;
}
export interface CreateChatResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chatId property
     */
    chatId?: Guid | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateChatRequest}
 */
// @ts-ignore
export function createCreateChatRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateChatRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateChatResponse}
 */
// @ts-ignore
export function createCreateChatResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateChatResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetModelsResponse}
 */
// @ts-ignore
export function createGetModelsResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetModelsResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IGetAllChatsResponse}
 */
// @ts-ignore
export function createIGetAllChatsResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIGetAllChatsResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IGetAllMessagesResponse}
 */
// @ts-ignore
export function createIGetAllMessagesResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIGetAllMessagesResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Message2}
 */
// @ts-ignore
export function createMessage2FromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessage2;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Message}
 */
// @ts-ignore
export function createMessageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ModelInfo}
 */
// @ts-ignore
export function createModelInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoModelInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SendMessageRequest}
 */
// @ts-ignore
export function createSendMessageRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSendMessageRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SendMessageResponse}
 */
// @ts-ignore
export function createSendMessageResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSendMessageResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChat(chat: Partial<Chat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { chat.id = n.getGuidValue(); },
        "name": n => { chat.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateChatRequest(createChatRequest: Partial<CreateChatRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { createChatRequest.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateChatResponse(createChatResponse: Partial<CreateChatResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chatId": n => { createChatResponse.chatId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetModelsResponse(getModelsResponse: Partial<GetModelsResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "models": n => { getModelsResponse.models = n.getCollectionOfObjectValues<ModelInfo>(createModelInfoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIGetAllChatsResponse(iGetAllChatsResponse: Partial<IGetAllChatsResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chats": n => { iGetAllChatsResponse.chats = n.getCollectionOfObjectValues<Chat>(createChatFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIGetAllMessagesResponse(iGetAllMessagesResponse: Partial<IGetAllMessagesResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "messages": n => { iGetAllMessagesResponse.messages = n.getCollectionOfObjectValues<Message>(createMessageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessage(message: Partial<Message> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "modelName": n => { message.modelName = n.getStringValue(); },
        "response": n => { message.response = n.getStringValue(); },
        "text": n => { message.text = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessage2(message2: Partial<Message2> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "response": n => { message2.response = n.getStringValue(); },
        "text": n => { message2.text = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoModelInfo(modelInfo: Partial<ModelInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "format": n => { modelInfo.format = n.getStringValue(); },
        "modifiedAt": n => { modelInfo.modifiedAt = n.getDateValue(); },
        "name": n => { modelInfo.name = n.getStringValue(); },
        "quantizationLevel": n => { modelInfo.quantizationLevel = n.getStringValue(); },
        "size": n => { modelInfo.size = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSendMessageRequest(sendMessageRequest: Partial<SendMessageRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chatId": n => { sendMessageRequest.chatId = n.getGuidValue(); },
        "modelName": n => { sendMessageRequest.modelName = n.getStringValue(); },
        "text": n => { sendMessageRequest.text = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSendMessageResponse(sendMessageResponse: Partial<SendMessageResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "messages": n => { sendMessageResponse.messages = n.getCollectionOfObjectValues<Message2>(createMessage2FromDiscriminatorValue); },
    }
}
export interface GetModelsResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The models property
     */
    models?: ModelInfo[] | null;
}
export interface IGetAllChatsResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chats property
     */
    chats?: Chat[] | null;
}
export interface IGetAllMessagesResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The messages property
     */
    messages?: Message[] | null;
}
export interface Message extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The modelName property
     */
    modelName?: string | null;
    /**
     * The response property
     */
    response?: string | null;
    /**
     * The text property
     */
    text?: string | null;
}
export interface Message2 extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The response property
     */
    response?: string | null;
    /**
     * The text property
     */
    text?: string | null;
}
export interface ModelInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The format property
     */
    format?: string | null;
    /**
     * The modifiedAt property
     */
    modifiedAt?: Date | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The quantizationLevel property
     */
    quantizationLevel?: string | null;
    /**
     * The size property
     */
    size?: number | null;
}
export interface SendMessageRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chatId property
     */
    chatId?: Guid | null;
    /**
     * The modelName property
     */
    modelName?: string | null;
    /**
     * The text property
     */
    text?: string | null;
}
export interface SendMessageResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The messages property
     */
    messages?: Message2[] | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChat(writer: SerializationWriter, chat: Partial<Chat> | undefined | null = {}) : void {
    if (chat) {
        writer.writeGuidValue("id", chat.id);
        writer.writeStringValue("name", chat.name);
        writer.writeAdditionalData(chat.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateChatRequest(writer: SerializationWriter, createChatRequest: Partial<CreateChatRequest> | undefined | null = {}) : void {
    if (createChatRequest) {
        writer.writeStringValue("name", createChatRequest.name);
        writer.writeAdditionalData(createChatRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateChatResponse(writer: SerializationWriter, createChatResponse: Partial<CreateChatResponse> | undefined | null = {}) : void {
    if (createChatResponse) {
        writer.writeGuidValue("chatId", createChatResponse.chatId);
        writer.writeAdditionalData(createChatResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetModelsResponse(writer: SerializationWriter, getModelsResponse: Partial<GetModelsResponse> | undefined | null = {}) : void {
    if (getModelsResponse) {
        writer.writeCollectionOfObjectValues<ModelInfo>("models", getModelsResponse.models, serializeModelInfo);
        writer.writeAdditionalData(getModelsResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIGetAllChatsResponse(writer: SerializationWriter, iGetAllChatsResponse: Partial<IGetAllChatsResponse> | undefined | null = {}) : void {
    if (iGetAllChatsResponse) {
        writer.writeCollectionOfObjectValues<Chat>("chats", iGetAllChatsResponse.chats, serializeChat);
        writer.writeAdditionalData(iGetAllChatsResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIGetAllMessagesResponse(writer: SerializationWriter, iGetAllMessagesResponse: Partial<IGetAllMessagesResponse> | undefined | null = {}) : void {
    if (iGetAllMessagesResponse) {
        writer.writeCollectionOfObjectValues<Message>("messages", iGetAllMessagesResponse.messages, serializeMessage);
        writer.writeAdditionalData(iGetAllMessagesResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessage(writer: SerializationWriter, message: Partial<Message> | undefined | null = {}) : void {
    if (message) {
        writer.writeStringValue("modelName", message.modelName);
        writer.writeStringValue("response", message.response);
        writer.writeStringValue("text", message.text);
        writer.writeAdditionalData(message.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessage2(writer: SerializationWriter, message2: Partial<Message2> | undefined | null = {}) : void {
    if (message2) {
        writer.writeStringValue("response", message2.response);
        writer.writeStringValue("text", message2.text);
        writer.writeAdditionalData(message2.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeModelInfo(writer: SerializationWriter, modelInfo: Partial<ModelInfo> | undefined | null = {}) : void {
    if (modelInfo) {
        writer.writeStringValue("format", modelInfo.format);
        writer.writeDateValue("modifiedAt", modelInfo.modifiedAt);
        writer.writeStringValue("name", modelInfo.name);
        writer.writeStringValue("quantizationLevel", modelInfo.quantizationLevel);
        writer.writeNumberValue("size", modelInfo.size);
        writer.writeAdditionalData(modelInfo.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSendMessageRequest(writer: SerializationWriter, sendMessageRequest: Partial<SendMessageRequest> | undefined | null = {}) : void {
    if (sendMessageRequest) {
        writer.writeGuidValue("chatId", sendMessageRequest.chatId);
        writer.writeStringValue("modelName", sendMessageRequest.modelName);
        writer.writeStringValue("text", sendMessageRequest.text);
        writer.writeAdditionalData(sendMessageRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSendMessageResponse(writer: SerializationWriter, sendMessageResponse: Partial<SendMessageResponse> | undefined | null = {}) : void {
    if (sendMessageResponse) {
        writer.writeCollectionOfObjectValues<Message2>("messages", sendMessageResponse.messages, serializeMessage2);
        writer.writeAdditionalData(sendMessageResponse.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
