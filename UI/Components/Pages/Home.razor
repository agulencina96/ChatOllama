@inject HttpClient HttpClient
@rendermode InteractiveServer
@page "/"
@using API.Features

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            Chat with Ollama
        </div>
        <div class="card-body">
            <div class="chat-box mb-3" style="height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 5px;">
                @foreach (var message in ChatMessages)
                {
                    <div class="@GetMessageClass(message.IsUser)">
                        <strong>@(message.IsUser ? "You" : "Ollama"):</strong> @message.Text
                    </div>
                }
            </div>
<form method="post" @formname="chat">
    <AntiforgeryToken />
    <div>
        <label>
            <InputText @bind-Value="UserMessage" />
        </label>
    </div>
    <div>
        <button type="button" @onclick="async (e) => { await Submit(e); }">Submit</button>
    </div>
</form>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private string? UserMessage { get; set; }
    
    private List<ChatMessage> ChatMessages { get; set; } = new List<ChatMessage>();

    private async Task Submit(MouseEventArgs e)
    {
        Console.WriteLine(e);
        if (!string.IsNullOrWhiteSpace(UserMessage))
        {
            ChatMessages.Add(new ChatMessage { Text = UserMessage, IsUser = true });

            var ollamaResponse = await GetOllamaResponse(UserMessage);
            
            ChatMessages.Add(new ChatMessage { Text = ollamaResponse, IsUser = false });
            UserMessage = string.Empty;
        }
    }

    private async Task<string?> GetOllamaResponse(string? message)
    {
        try
        {
            using var response = await HttpClient.PostAsJsonAsync("/chat/send-message", new SendMessageReq()
            {
                Content = message,
                ChatId = 
            });
            var jsonResponse = await response.Content.ReadAsStringAsync();
            return jsonResponse;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return "Errorcito: " + e.Message;
        }
       
    }
    
    private string GetMessageClass(bool isUser)
    {
        return isUser ? "text-end text-primary" : "text-start text-secondary";
    }

    private class ChatMessage
    {
        public string? Text { get; set; }
        public bool IsUser { get; set; }
    }
}
